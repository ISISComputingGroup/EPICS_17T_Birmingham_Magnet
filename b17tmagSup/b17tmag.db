# record(bo, "$(P)SIM")
# {
#     field(SCAN, "Passive")
#     field(DTYP, "Soft Channel")
#     field(ZNAM, "NO")
#     field(ONAM, "YES")
#     field(VAL, "$(RECSIM=0)")
#     field(PINI, "YES")
# }

record(bo, "$(P)DISABLE"){
    field(DESC, "Disable comms")
    field(PINI, "YES")
    field(VAL, "$(DISABLE=0)")
    field(OMSL, "supervisory")
    field(ZNAM, "COMMS ENABLED")
    field(ONAM, "COMMS DISABLED")
}


record(ai, "$(P)FIELD"){
    field(DESC, "The field of the magnet at present")
    field(DTYP, "stream")
    field(INP, "@b17tmag.proto getField($(P)) $(PORT)")
    field(SCAN, "1 second")
    field(EGU, "T")
    info(INTEREST, "HIGH")
}

record(ai, "$(P)CURR"){
    field(DESC, "The current of the magnet at present")
    field(DTYP, "stream")
    field(INP, "@b17tmag.proto getField($(P)) $(PORT)")
    # field(INP, "@b17tmag.proto getCurrent") - part of getField
    field(EGU, "A")
    info(INTEREST, "HIGH")
}

record(mbbi, "$(P)HEATER"){
    field(DESC, "The status of the heater")
    field(DTYP, "stream")
    field(SCAN, "1 second")
    field(INP, "@b17tmag.proto getHeater $(PORT)")
    field(ZRVL, "0")
    field(ZRST, "ON")
    field(ONVL, "1")
    field(ONST, "OFF")
    field(TWVL, "2")
    field(TWST, "OFF AT FIELD")
    field(THVL, "3")
    field(THST, "NO MATCH")
    info(INTEREST, "HIGH")
}

record(ai, "$(P)FIELD:PERSIST"){
    field(DESC, "Persistent field of magnet at present")
    field(DTYP, "stream")
    field(SCAN, "1 second")
    field(EGU, "T")
    field(INP, "@b17tmag.proto getPersist($(P)) $(PORT)")
    info(INTEREST, "HIGH")
}

record(ai, "$(P)CURR:PERSIST"){
    field(DESC, "Persistent current of magnet at present")
    field(DTYP, "stream")
    field(SCAN, "1 second")
    field(EGU, "A")
    field(INP, "@b17tmag.proto getPersist($(P)) $(PORT)")
    info(INTEREST, "HIGH")
}

record(bi, "$(P)MODE:PERSIST"){
    field(DESC, "Whether the magnets in persistent mode")
    field(DTYP, "stream")
    field(SCAN, "1 second")
    field(INP, "@b17tmag.proto getPersistMode $(PORT)")
    field(ZNAM, "ON")
    field(ONAM, "OFF")
    info(INTEREST, "HIGH")
}

record(bi, "$(P)READY"){
    field(DESC, "Whether the magnets stable and at field")
    field(DTYP, "stream")
    field(SCAN, "1 second")
    field(INP, "@b17tmag.proto getReady $(PORT)")
    field(ZNAM, "ON")
    field(ONAM, "OFF")
    info(INTEREST, "HIGH")
}

# Low priority - need to run abort first (should be achievable in the protocol file)
record(ao, "$(P)FIELD:SP"){
    field(DESC, "The field to set")
    field(DTYP, "stream")
    field(EGU, "T")
    field(OUT, "@b17tmag.proto setField $(PORT)")
    info(INTEREST, "LOW")
}

record(bo, "$(P)MODE:PERSIST:SP"){
    field(DESC, "The persistent field to set")
    field(DTYP, "stream")
    field(OUT, "@b17tmag.proto setPersistMode $(PORT)")
    field(ZNAM, "ON")
    field(ONAM, "OFF")
    field(FLNK, "$(P)MODE:PERSIST PP MS")
    info(INTEREST, "LOW")
}

record(ai, "$(P)TEMP:A"){
    field(DESC, "The temperature at sensor A")
    field(DTYP, "stream")
    field(SCAN, "1 second")
    field(EGU, "K")
    field(INP, "@b17tmag.proto getSensA $(PORT)")
    info(INTEREST, "HIGH")
}

record(ai, "$(P)TEMP:B"){
    field(DESC, "The temperature at sensor B")
    field(DTYP, "stream")
    field(SCAN, "1 second")
    field(EGU, "K")
    field(INP, "@b17tmag.proto getSensB $(PORT)")
    info(INTEREST, "HIGH")
}

record(ai, "$(P)TEMP:SET1"){
    field(DESC, "The temperature for setpoint 1")
    field(DTYP, "stream")
    field(SCAN, "1 second")
    field(EGU, "K")
    field(INP, "@b17tmag.proto getSet1 $(PORT)")
    info(INTEREST, "HIGH")
}

record(ai, "$(P)TEMP:SET2"){
    field(DESC, "The temperature for setpoint 2")
    field(DTYP, "stream")
    field(SCAN, "1 second")
    field(EGU, "K")
    field(INP, "@b17tmag.proto getSet2 $(PORT)")
    info(INTEREST, "HIGH")
}

record(ao, "$(P)TEMP:SET1:SP"){
    field(DESC, "The temperature for setpoint 1")
    field(DTYP, "stream")
    field(EGU, "K")
    field(OUT, "@b17tmag.proto setSet1 $(PORT)")
    info(INTEREST, "HIGH")
}

record(ao, "$(P)TEMP:SET2:SP"){
    field(DESC, "The temperature for setpoint 2")
    field(DTYP, "stream")
    field(EGU, "K")
    field(OUT, "@b17tmag.proto setSet2 $(PORT)")
    info(INTEREST, "HIGH")
}

# Alias's
alias("$(P)TEMP:SET1", "$(P)TEMP:HEATEX")
alias("$(P)TEMP:SET1:SP", "$(P)TEMP:HEATEX:SP")
alias("$(P)TEMP:SET2", "$(P)TEMP:PROBE")
# alias("$(P)TEMP:SET2:SP", "$(P)TEMP:PROBE:SP $(PORT)")
alias("$(P)TEMP:SET2:SP", "$(P)TEMP:PROBE:SP")


record(ai, "$(P)NV:POS"){
    field(DESC, "The position of the needle valve")
    field(DTYP, "stream")
    field(SCAN, "1 second")
    field(EGU, "mm")
    field(INP, "@b17tmag.proto getNeedlePosition $(PORT)")
    info(INTEREST, "HIGH")
}

record(ai, "$(P)NV:POS:RBV"){
    field(DESC, "The current pressue target")
    field(DTYP, "stream")
    field(SCAN, "1 second")
    field(EGU, "mm")
    field(INP, "@b17tmag.proto getPressure($(P)) $(PORT)")

    # field(INP, "@b17tmag.proto getPressure") Part of getPressure need to send in the prefix a well
    info(INTEREST, "HIGH")
}

record(ai, "$(P)NV:PRESSURE"){
    field(DESC, "The current pressure")
    field(DTYP, "stream")
    field(EGU, "mbar")
    field(INP, "@b17tmag.proto getPressure($(P)) $(PORT)")
    # field(INP, "@b17tmag.proto getPressure") Part of getPressure need to send in the prefix a well
    info(INTEREST, "HIGH")
}

record(ao, "$(P)NV:PRESSURE:SP"){
    field(DESC, "The pressue target")
    field(DTYP, "stream")
    field(EGU, "mbar")
    field(OUT, "@b17tmag.proto setPressure $(PORT)")
}

# Not in manual but exists currently to satisfy manual proto file method
record(ai, "$(P)NV:PRESSURE:SP:RBV"){
    field(DESC, "The current pressue target")
    field(DTYP, "stream")
    field(SCAN, "1 second")
    field(EGU, "mbar")
    field(INP, "@b17tmag.proto getPressure($(P)) $(PORT)")
    info(INTEREST, "HIGH")
}

record(ao, "$(P)NV:POS:SP"){
    field(DESC, "The target position for the needle valve")
    field(DTYP, "stream")
    field(EGU, "mm")
    field(OUT, "@b17tmag.proto setNeedlePosition $(PORT)")
}

record(ao, "$(P)ATTO:POS"){
    field(DESC, "Angle of the attocube")
    field(DTYP, "stream")
    field(SCAN, "1 second")
    field(EGU, "deg")
    field(OUT, "@b17tmag.proto getAttoAngle $(PORT)")
    info(INTEREST, "HIGH")
}

# Needs to be converted to a percentge of 243 
# (divide the returned value by 243 then multiply by 100) 
# - maybe possible at the proto file level
# HE LEVEL Raw Input Value
record(ai, "$(P)HE:LEVEL_RAW"){
    field(DESC, "The current level of helium")
    field(DTYP, "stream")
    field(SCAN, "1 second")
    field(EGU, "%")
    field(INP, "@b17tmag.proto getHelLevel $(PORT)")
    info(INTEREST, "HIGH")
    field(FLNK, "$(P)HE:LEVEL:CALC PP")
}

# HE LEVEL Calc Value as Pecentage of 245
record(calcout, "$(P)HE:LEVEL:CALC"){
    field(DESC, "Percentage value of HE:LEVEL")
    field(INPA, "$(P)HE:LEVEL_RAW")
    field(CALC, "(A / 245) * 100")
    field(OUT, "$(P)HE:LEVEL PP")
}

# HE LEVEL as percetnage of 245
record(ai, "$(P)HE:LEVEL"){
    field(DESC, "The current level of helium")
    field(DTYP, "stream")
    field(PREC, "2")
    field(EGU, "%")
    info(INTEREST, "HIGH")
}

record(ao, "$(P)ATTO:POS:SP"){
    field(DESC, "Angle for the AttoCube to go to")
    field(DTYP, "stream")
    field(EGU, "deg")
    field(OUT, "@b17tmag.proto setAttoAngle $(PORT)")
    info(INTEREST, "LOW")
}

record(waveform, "$(P)MACRO:STAT") {
    field(DESC, "The current status of the system")
    field(NELM, "1024")
    field(FTVL, "STRING")
    field(SDIS, "$(P)MACRO:STAT:READ")
    field(SCAN, "1 second")
    # field(BUSY, "$(P)MACRO:STAT:READ")
    field(INP, "@b17tmag.proto getMacroStatus $(PORT)") # Only read when MACRO:STAT:READ is True
    info(INTEREST, "MEDIUM")
}

# May need to be treated as a busy or similar.
# but allows for the reading (or not) of the status macro
record(bo, "$(P)MACRO:STAT:READ"){
    field(DESC, "Whether or not to read MACRO:STAT $(PORT)")
    field(VAL, "0")
    field(ZNAM, "True")
    field(ONAM, "False")
    # field(FLNK, "$(P)MACRO:STAT")
    info(INTEREST, "MEDIUM")
}

# record(calc, "$(P)MACRO:STAT:PP") {
#     field(DESC, "Process MACRO:STAT if READ True")
#     field(SCAN, "1 second")
#     field(INPA, "$(P)MACRO:STAT:READ")
#     field(CALC, "A = 0 ? $(P)MACRO:STAT : $(P)MACRO:STAT:PP")
# }



# CALC record to disable MACRO:STAT is MACRO:STAT:READ is False else enable

#  Maybe an intemediary record that can be disabled by MACRO:STAT 
# or control BUSY field in MACRO:STAT waveform record


